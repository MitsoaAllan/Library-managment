openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/HEIMITSOA/LibraryManagment/1.0.0
info:
  description: API to manage books and authors
  version: "1.0.0"
  title: Library Management System
  contact:
    email: hei.mitsoa@gmail.com
paths:
  /books:
    get:
      summary: Collect a list of books
      parameters:
        - name: bookName
          in: query
          description: Filter by book name
          required: false
          schema:
            type: string
        - name: releaseDateBegins
          in: query
          description: Date release begining
          required: false
          schema:
            type: string
            format: date
        - name: releaseDateFinishes
          in: query
          description: Date release finishing
          required: false
          schema:
            type: string
            format: date
      responses:
        '200':
          description: List of books collected
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      summary: Add a new book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: Book added
  /books/{bookId}:
    put:
      summary: Update an existing book
      description: Update a book (idempotent operation).
      parameters:
        - name: bookId
          in: path
          required: true
          description: The ID of the book to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: Book has been updated
    delete:
      summary: Remove a book
      description: Remove a book by ID.
      parameters:
        - name: bookId
          in: path
          required: true
          description: The ID of the book to delete
          schema:
            type: integer
      responses:
        '204':
          description: Book has been deleted
  /authors:
    get:
      summary: Collect a list of authors
      description: Collect a list of authors which can be filtered by name.
      parameters:
        - name: authorName
          in: query
          description: Filter by author name
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    post:
      summary: Add a new author
      description: Add a new author to the library.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '201':
          description: Author has been added
  /authors/{authorId}:
    put:
      summary: Update an author
      description: Update an author (idempotent operation).
      parameters:
        - name: authorId
          in: path
          required: true
          description: The ID of the author to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '200':
          description: Author has been updated
    delete:
      summary: Remove an author
      description: Remove an author by ID.
      parameters:
        - name: authorId
          in: path
          required: true
          description: The ID of the author to delete
          schema:
            type: integer
      responses:
        '204':
          description: Author has been deleted
components:
  schemas:
    Book:
      type: object
      required:
        - bookName
        - author
      properties:
        id:
          type: integer
          description: Unique ID of the book
        bookName:
          type: string
          description: Name of the book
        author:
          type: string
          description: Name of the author
        pageNumbers:
          type: integer
          description: Number of pages
        topic:
          type: string
          enum: [ROMANCE, COMEDY, OTHER]
          description: Genre of the book
        releaseDate:
          type: string
          format: date
          description: Release date of the book
    Author:
      type: object
      required:
        - name
        - sex
      properties:
        id:
          type: integer
          description: Unique ID of the author
        name:
          type: string
          description: Name of the author
        sex:
          type: string
          enum: [M, F]
          description: Gender of the author