# openapi: 3.1.0
# info:
#   version: 1.0.0
#   title: Library managment
#   description: An API to manage authors and books
# paths:
#   /books:
#     get: 
#     parameters:
#       - name: bookName
#         in: query
#         description: Filtre par nom du livre
#         required: false
#         schema:
#           type: string
#       - name: releaseDate
#         in: query
#         description: Filtre par intervalle de dates de publication
#         required: false
#         schema:
#           type: string
#     responses:
#           '200':
#             description: Liste des livres
#             content:
#               application/json:
#                 schema:
#                   type: array
#                   items:
#                     $ref: '#/components/schemas/Book'
#   post:
#     requestBody:
#       required: true
#       content:
#         application/json:
#           schema:
#             $ref: '#/components/schemas/Book'
#     responses:
#           '201':
#             description: Livre créé avec succès
#     put:
#         parameters:
#           - name: bookId
#             in: path
#             required: true
#             description: ID du livre à mettre à jour
#             schema:
#               type: string
#         requestBody:
#           required: true
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/Book'
#         responses:
#           '200':
#             description: Livre mis à jour avec succès
#     delete:
#         parameters:
#           - name: bookId
#             in: path
#             required: true
#             description: ID du livre à supprimer
#             schema:
#               type: string
#         responses:
#           '204':
#             description: Livre supprimé avec succès

#     /authors:
#       get:
#         parameters:
#           - name: authorName
#             in: query
#             description: Filtre par nom de l'auteur
#             required: false
#             schema:
#               type: string
#         responses:
#           '200':
#             description: Liste des auteurs
#             content:
#               application/json:
#                 schema:
#                   type: array
#                   items:
#                     $ref: '#/components/schemas/Author'
#       post:
#         requestBody:
#           required: true
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/Author'
#         responses:
#           '201':
#             description: Auteur créé avec succès
#       put:
#         parameters:
#           - name: authorId
#             in: path
#             required: true
#             description: ID de l'auteur à mettre à jour
#             schema:
#               type: string
#         requestBody:
#           required: true
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/Author'
#         responses:
#           '200':
#             description: Auteur mis à jour avec succès
#       delete:
#         parameters:
#           - name: authorId
#             in: path
#             required: true
#             description: ID de l'auteur à supprimer
#             schema:
#               type: string
#         responses:
#           '204':
#             description: Auteur supprimé avec succès

#   components:
#     schemas:
#       Book:
#         type: object
#         properties:
#           id:
#             type: string
#             description: L'ID unique du livre
#           bookName:
#             type: string
#             description: Nom du livre
#           author:
#             type: string
#             description: Nom de l'auteur
#           pageNumbers:
#             type: integer
#             description: Nombre de pages
#           topic:
#             type: string
#             enum: [ROMANCE, COMEDY, OTHER]
#             description: Thème du livre
#           releaseDate:
#             type: string
#             format: date
#             description: Date de publication
#       Author:
#         type: object
#         properties:
#           id:
#             type: string
#             description: L'ID unique de l'auteur
#           name:
#             type: string
#             description: Nom de l'auteur
#           sex:
#             type: string
#             enum: [M, F]
#             description: Sexe de l'auteur (M pour Masculin, F pour Féminin)


openapi: 3.0.0
info:
  title: Library Management System
  version: 1.0.0
  description: API to manage books and authors
paths:
  /books:
    get:
      summary: Collect a list of books
      parameters:
        - name: bookName
          in: query
          description: Filter by book name
          schema:
            type: string
        - name: releaseDateBegin
          in: query
          description: Filter by release date (begin)
          required: false
          schema:
            type: string
            format: date
        - name: releaseDateFinish
          in: query
          description: Filter by release date (finish)
          required: false
          schema:
            type: string
            format: date
      responses:
        '200':
          description: List of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      summary: Add a new book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bookName:
                  type: string
                author:
                  type: string
                pageNumbers:
                  type: integer
                topic:
                  type: string
                  enum: [ROMANCE, COMEDY, OTHER]
                releaseDate:
                  type: string
                  format: date
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: Book added
    put:
      summary: Update an existing book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                bookName:
                  type: string
                author:
                  type: string
                pageNumbers:
                  type: integer
                topic:
                  type: string
                  enum: [ROMANCE, COMEDY, OTHER]
                releaseDate:
                  type: string
                  format: date
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: Book has been updated
    delete:
      summary: Delete a book
      parameters:
        - name: bookid
          in: query
          description: ID of the book to delete
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Book has been deleted

  /authors:
    get:
      summary: Collect a list of authors
      parameters:
        - name: authorName
          in: query
          description: Filter by author name
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved list of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    post:
      summary: Add a new author
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                sex:
                  type: string
                  enum: [M, F]
              $ref: '#/components/schemas/Author'
      responses:
        '201':
          description: Author added
    put:
      summary: Update an existing author
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                name:
                  type: string
                sex:
                  type: string
                  enum: [M, F]
              $ref: '#/components/schemas/Author'
      responses:
        '200':
          description: Author has been updated
    delete:
      summary: Remove an author
      parameters:
        - name: authorId
          in: query
          description: author's ID to delete
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Author has been deleted
